# We don't want to force a non-default C or C++ implementation on 3rd party libs
CSTD =
CPPSTD =

# We cannot control whether these libs have warnings or not.
ENABLE_WALL = 0

# Grab the same base that we use to compile libnaomi and the examples.
include $(dir $(abspath $(lastword $(MAKEFILE_LIST))))../Makefile.base

THIRD_PARTY_LIBS = -lnaomi ${BASELIBS} ${REQUIRED_LIBS}

download/${ARTIFACT}:
	mkdir -p download
	wget ${BASE_URL}/${ARTIFACT} -P download

ifeq ($(suffix ${ARTIFACT}), .zip)
build/${NAME}: download/${ARTIFACT}
	mkdir -p build
	unzip download/${ARTIFACT} -d build
else
ifeq ($(suffix ${ARTIFACT}), .bz2)
build/${NAME}: download/${ARTIFACT}
	mkdir -p build
	tar -xvjf download/${ARTIFACT} -C build
else
build/${NAME}: download/${ARTIFACT}
	mkdir -p build
	tar -xvzf download/${ARTIFACT} -C build
endif
endif

ifeq ($(USES_AUTOCONF), 1)
ifeq ($(GENERATE_CONFIGURE), 1)
build/generate.stamp: build/${NAME}
	cd build/${NAME}/ ; CC="${NAOMI_SH_CC}" CFLAGS="${NAOMI_SH_CCFLAGS} ${DEFINES} ${THIRD_PARTY_LIBS}" CPP="${NAOMI_SH_CPP} -E" CPPFLAGS="${NAOMI_SH_CPPFLAGS} ${THIRD_PARTY_LIBS}" AR="${NAOMI_SH_AR}" LD="${NAOMI_SH_LD}" LDFLAGS="${NAOMI_SH_LDLIBPATHS}" LIBS="${THIRD_PARTY_LIBS}" autoconf
	touch build/generate.stamp
else
build/generate.stamp: build/${NAME}
	touch build/generate.stamp
endif

build/config.stamp: build/generate.stamp
	cd build/${NAME}/ ; CC="${NAOMI_SH_CC}" CFLAGS="${NAOMI_SH_CCFLAGS} ${DEFINES} ${THIRD_PARTY_LIBS}" CPP="${NAOMI_SH_CPP} -E" CPPFLAGS="${NAOMI_SH_CPPFLAGS} ${THIRD_PARTY_LIBS}" AR="${NAOMI_SH_AR}" LD="${NAOMI_SH_LD}" LDFLAGS="${NAOMI_SH_LDLIBPATHS}" LIBS="${THIRD_PARTY_LIBS}" ./configure ${CONFIGURE_ARGS} --prefix=${NAOMI_SH_BASE}
	touch build/config.stamp

build/build.stamp: build/config.stamp
	make -C build/${NAME} ${BUILD_TARGET}
	touch build/build.stamp

.PHONY: configure
configure: build/config.stamp
else
ifeq ($(USES_CUSTOM_MAKEFILE), 1)
build/build.stamp: build/${NAME}
	cp Makefile.custom build/${NAME}/Makefile
	make -C build/${NAME} "${BUILD_TARGET}"
	touch build/build.stamp

.PHONY: configure
configure:
else
build/build.stamp: build/${NAME}
	make -C build/${NAME} "${BUILD_TARGET}" CC="${NAOMI_SH_CC}" CFLAGS="${NAOMI_SH_CCFLAGS} ${DEFINES} ${THIRD_PARTY_LIBS}" CPP="${NAOMI_SH_CPP}" CPPFLAGS="${NAOMI_SH_CPPFLAGS} ${THIRD_PARTY_LIBS}" AR="${NAOMI_SH_AR}" LD="${NAOMI_SH_LD}" LDFLAGS="${NAOMI_SH_LDLIBPATHS}" LIBS="${THIRD_PARTY_LIBS}"
	touch build/build.stamp

.PHONY: configure
configure:
endif
endif

.PHONY: download
download: download/${ARTIFACT}

.PHONY: extract
extract: build/${NAME}

.PHONY: build
build: build/build.stamp

ifeq ($(INSTALL_LIBS),)
INSTALL_LIBS = ${BUILD_TARGET}
endif
.PHONY: install
install: build/build.stamp
ifeq ($(NO_INSTALL), 1)
else
.PHONY: install
install: build/build.stamp
	mkdir -p ${NAOMI_SH_BASE}/lib
	cd build/${NAME} ; for F in ${INSTALL_LIBS} ; do cp -v "$$F" ${NAOMI_SH_BASE}/lib/`${PREFIX} --strip-dir lib $$F` ; done
	mkdir -p ${NAOMI_SH_BASE}/include/${HEADER_INSTALLDIR}
	cd build/${NAME} ; cp -v ${INSTALL_HEADERS} ${NAOMI_SH_BASE}/include/${HEADER_INSTALLDIR}
endif

.PHONY: clean
clean:
	rm -rf build

.PHONY: allclean
allclean: clean
	rm -rf download
