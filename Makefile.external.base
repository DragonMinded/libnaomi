# Set a default optimization level if the makefile didn't request one.
OPTIMIZATION_LEVEL ?= -O3

# Set a default C standard and C++ standard.
CSTD ?=
CPPSTD ?=

# Our venv python3 so that dependencies work properly.
VENV_PYTHON3 := ${NAOMI_BASE}/tools/pyenv/bin/python3

# Top-level makefile compiling this project
TOPLEVEL_MAKEFILE := $(abspath $(firstword $(MAKEFILE_LIST)))

# Our makefile location for several tools.
TOOLS_DIR := ${NAOMI_BASE}/tools/

# Set up common library path definitions.
NAOMI_SH_INCLUDEPATHS  = -I${NAOMI_SH_BASE}/include/ -I${NAOMI_SH_BASE}/sh-elf/include/
# For some reason, freetype expects to be special and different.
NAOMI_SH_INCLUDEPATHS += -I${NAOMI_SH_BASE}/include/freetype2/

# Little-endian SH-4.
NAOMI_SH_CCFLAGS  = -ml
# Don't use the system standard library (We supply our own newlib-one with -lc in the link step).
NAOMI_SH_CCFLAGS += -nostdlib
# Don't use the system start files (We supply our own crt0).
NAOMI_SH_CCFLAGS += -nostartfiles
# Don't use GCC stack protection (its not needed on a kernel-less system).
NAOMI_SH_CCFLAGS += -fno-stack-protector
# We're making a free-standing binary.
NAOMI_SH_CCFLAGS += -ffreestanding
# Don't generate code that uses a frame pointer.
NAOMI_SH_CCFLAGS += -fomit-frame-pointer
# Put every object in its own section so the linker can trim dead code.
NAOMI_SH_CCFLAGS += -ffunction-sections -fdata-sections
# Add libnaomi to include path.
NAOMI_SH_CCFLAGS += ${NAOMI_SH_INCLUDEPATHS}
# Make sure we compile optimized
NAOMI_SH_CCFLAGS += ${OPTIMIZATION_LEVEL}
# Make sure we warn about a bunch of stuff.
NAOMI_SH_CCFLAGS += -Wall
# Produce debug information so addr2line works.
NAOMI_SH_CCFLAGS += -g
# Add on C standard if present.
NAOMI_SH_CCFLAGS += $(if $(CSTD), -std=$(CSTD),)

# Set up gcc default options for compiling .c files.
CC  = ${NAOMI_SH_CC} ${NAOMI_SH_CCFLAGS}

# Little-endian SH-4.
NAOMI_SH_CPPFLAGS  = -ml
# Don't use the system standard library (We supply our own newlib-one with -lc in the link step).
NAOMI_SH_CPPFLAGS += -nostdlib
# Don't use the system start files (We supply our own crt0).
NAOMI_SH_CPPFLAGS += -nostartfiles
# Don't use GCC stack protection (its not needed on a kernel-less system).
NAOMI_SH_CPPFLAGS += -fno-stack-protector
# We're making a free-standing binary.
NAOMI_SH_CPPFLAGS += -ffreestanding
# Don't generate code that uses a frame pointer.
NAOMI_SH_CPPFLAGS += -fomit-frame-pointer
# Put every object in its own section so the linker can trim dead code.
NAOMI_SH_CPPFLAGS += -ffunction-sections -fdata-sections
# Add libnaomi to include path.
NAOMI_SH_CPPFLAGS += ${NAOMI_SH_INCLUDEPATHS}
# Make sure we compile optimized
NAOMI_SH_CPPFLAGS += ${OPTIMIZATION_LEVEL}
# Make sure we warn about a bunch of stuff.
NAOMI_SH_CPPFLAGS += -Wall
# Produce debug information so addr2line works.
NAOMI_SH_CPPFLAGS += -g
# Add on C++ standard if present.
NAOMI_SH_CPPFLAGS += $(if $(CPPSTD), -std=$(CPPSTD),)

# Set up gcc default options for compiling .cpp files.
CPP  = ${NAOMI_SH_CPP} ${NAOMI_SH_CPPFLAGS}

# Set up the libraries we care about.
NAOMI_SH_LDLIBPATHS  = -L${NAOMI_SH_BASE}/sh-elf/lib/ -L${NAOMI_SH_BASE}/lib/ -L${NAOMI_SH_BASE}/lib/gcc/sh-elf/${NAOMI_SH_GCC_VER}/

# SH-4 little endian ELF format.
NAOMI_SH_LDFLAGS  = -mshlelf
# Use our supplied naomi linkscript.
NAOMI_SH_LDFLAGS += -T${NAOMI_BASE}/tools/naomi.ld
# Garbage collect (trim dead functions)
NAOMI_SH_LDFLAGS += --gc-sections
# Add library paths so we can link against newlib-provided system libs.
NAOMI_SH_LDFLAGS += ${NAOMI_SH_LDLIBPATHS}

# Set up linker default options for linking the final elf file.
LD  = ${NAOMI_SH_LD} ${NAOMI_SH_LDFLAGS}

# Little endian SH-4
NAOMI_SH_ASFLAGS  = --isa sh4 -little

# Set up assembler default options for compiling .s files.
AS  = ${NAOMI_SH_AS} ${NAOMI_SH_ASFLAGS}

# Set up default options for objcopy, used for extracting the raw binary from the linked elf file.
OBJCOPY = ${NAOMI_SH_OBJCOPY}

# Set up default archiver, used for creating libraries.
AR  = ${NAOMI_SH_AR}

# Set up gcc default options for AICA .c files.
ARMCC  = ${NAOMI_ARM_CC}
# Set up processor flags.
ARMCC += -mcpu=arm7
# Don't use the system standard library (We supply our own stubs for necessary files).
# These largely have the same justification as their counterparts in the above CC section.
ARMCC += -ffreestanding -fomit-frame-pointer -nostdlib -nostartfiles -fno-stack-protector
# Make sure we compile optimized
ARMCC += -O3
# Include debugging information for addr2line.
ARMCC += -g

# Set up assembler default options for AICA .s files.
ARMAS  = ${NAOMI_ARM_AS}
# Make sure to specify the correct arch.
ARMAS += -mcpu=arm7

# Set up linker default options for AICA binaries.
ARMLD  = ${NAOMI_ARM_LD}
# Make sure we use the right ELF format.
ARMLD += -marmelf
# Force linking with simple linkscript that guarantees entrypoint.
ARMLD += -T${NAOMI_BASE}/tools/aica.ld
# Add system library paths so we can link against libgcc.
ARMLD += -L${NAOMI_ARM_BASE}/arm-eabi/lib/ -L${NAOMI_ARM_BASE}/lib/gcc/arm-eabi/${NAOMI_ARM_GCC_VER}/

include ${NAOMI_BASE}/tools/Makefile.shared
